// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    // 0: 0=A instr, 1=C instr
    // A: instruction bits load into A register
    //    15 14 13 12 11-6   5-3    2-0
    // C: 1  x  x  a  cccccc ddd    jjj
    // a, cccccc are comp part. a for pre-ALU A/M Mux, cccccc control ALU
    // ddd are destination
    // jjj are jump
    // xx is ignored


    Mux16(a=instruction, b=ALUout, sel=instruction[15], out=muxInALUout);

    Not(in=instruction[15], out=isA);
    Or(a=isA, b=instruction[5], out=loadA);				// load if A-instruction or control bit is asserted
    ARegister(in=muxInALUout, load=loadA, out=aRegOut, out[0..14]=addressM);

    Mux16(a=aRegOut, b=inM, sel=instruction[12], out=muxAMout);		 

    And(a=instruction[15], b=instruction[4], out=loadD);
    DRegister(in=ALUout, load=loadD, out=dRegOut);	


    ALU(x=dRegOut, y=muxAMout, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=ALUout, out=outM, zr=zero, ng=neg);	

   
// PC Load evaluation, use DMux to map 3 bits to jump condition, then evaluate if condition is met
    DMux8Way(in=true, sel=instruction[0..2], a=noJump, b=JGT, c=JEQ, d=JGE, e=JLT, f=JNE, g=JLE, h=JMP);

    Not(in=neg, out=notNeg);
    Not(in=zero, out=notZero);

    And(a=JGT, b=notNeg, out=jgtN);
    And(a=JGT, b=notZero, out=jgtZ);
    And(a=jgtN, b=jgtZ, out=jgtBool);

    And(a=JEQ, b=zero, out=jeqBool);

    And(a=JGE, b=notNeg, out=jgeBool);

    And(a=JLT, b=neg, out=jltBool);

    And(a=JNE, b=notZero, out=jneBool);

    And(a=JLE, b=neg, out=jleN);
    And(a=JLE, b=zero, out=jleZ);
    Or(a=jleN, b=jleZ, out=jleBool);

    // if jump condition is met and it's a C-instruction, pc load bit is true
    Or8Way(in[0]=false, in[1]=jgtBool, in[2]=jeqBool, in[3]=jgeBool, in[4]=jltBool, in[5]=jneBool, in[6]=jleBool, in[7]=JMP, out=jumpBool);
    And(a=jumpBool, b=instruction[15], out=pcLoad);


    PC(in=aRegOut, load=pcLoad, inc=true, reset=reset, out[0..14]=pc);

    // assert write bit if C-instruction
    And(a=instruction[15], b=instruction[3], out=writeM);

}

